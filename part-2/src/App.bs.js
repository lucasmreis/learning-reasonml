// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as Block       from "bs-platform/lib/es6/block.js";
import * as Curry       from "bs-platform/lib/es6/curry.js";
import * as React       from "react";
import * as Pervasives  from "bs-platform/lib/es6/pervasives.js";
import * as Json_decode from "@glennsl/bs-json/src/Json_decode.bs.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";

import './App.css'
;

function drawQuantity(deck) {
  return Pervasives.min(deck[/* remaining */1], 3).toString();
}

function decodeCreatedDeck(json) {
  return /* record */[
          /* deckId */Json_decode.field("deck_id", Json_decode.string, json),
          /* remaining */Json_decode.field("remaining", Json_decode.$$int, json),
          /* cards : [] */0
        ];
}

var component = ReasonReact.reducerComponent("App");

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      Curry._1(self[/* send */4], /* CreateDeck */0);
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (self) {
      var match = self[/* state */2];
      var tmp;
      if (typeof match === "number") {
        tmp = match ? React.createElement("p", undefined, "Error") : React.createElement("p", undefined, "Loading...");
      } else {
        switch (match.tag | 0) {
          case 0 : 
              tmp = React.createElement("button", {
                    className: "App main-action",
                    onClick: (function () {
                        return Curry._1(self[/* send */4], /* Draw */2);
                      })
                  }, "Draw " + drawQuantity(match[0]));
              break;
          case 1 : 
              tmp = React.createElement("p", undefined, "DrawingCards");
              break;
          case 2 : 
              tmp = React.createElement("p", undefined, "Finished");
              break;
          
        }
      }
      return React.createElement("div", {
                  className: "App"
                }, tmp);
    });
  newrecord[/* initialState */10] = (function () {
      return /* CreatingDeck */0;
    });
  newrecord[/* reducer */12] = (function (action, _) {
      if (typeof action === "number") {
        if (action !== 0) {
          return /* Update */Block.__(0, [/* Error */1]);
        } else {
          return /* UpdateWithSideEffects */Block.__(3, [
                    /* CreatingDeck */0,
                    (function (self) {
                        fetch("https://deckofcardsapi.com/api/deck/new/shuffle/").then((function (prim) {
                                    return prim.json();
                                  })).then((function (json) {
                                  var deck = decodeCreatedDeck(json);
                                  return Promise.resolve(Curry._1(self[/* send */4], /* DeckCreated */[deck]));
                                })).catch((function () {
                                return Promise.resolve(Curry._1(self[/* send */4], /* CreateDeckFailed */1));
                              }));
                        return /* () */0;
                      })
                  ]);
        }
      } else {
        return /* Update */Block.__(0, [/* WaitingForUser */Block.__(0, [action[0]])]);
      }
    });
  return newrecord;
}

var $$default = ReasonReact.wrapReasonForJs(component, (function () {
        return make(/* array */[]);
      }));

var number_of_cards_per_draw = 3;

export {
  number_of_cards_per_draw ,
  drawQuantity             ,
  decodeCreatedDeck        ,
  component                ,
  make                     ,
  $$default                ,
  $$default                  as default,
  
}
/*  Not a pure module */
